{"version":3,"sources":["components/navbar/Navbar.js","components/pdf-render/PDFRenderer.js","components/page-remover/PageRemover.js","components/editor/Editor.js","components/file/File.js","App.js","serviceWorker.js","index.js"],"names":["className","Navbar","bg","variant","Brand","href","PDFRenderer","state","numPages","props","onFileChange","event","setState","file","target","files","onDocumentLoadSuccess","this","pdf","onLoadSuccess","Array","from","el","index","key","pageNumber","Component","pdfDoc","onPdfDocChange","useState","validated","setValidated","startPage","setStartPage","endPage","setEndPage","handleSubmit","a","preventDefault","form","currentTarget","formIsValid","checkValidity","removePage","Form","noValidate","onSubmit","Row","Col","Control","type","min","placeholder","value","onChange","required","Button","filename","handleDownload","e","save","pdfBytes","downloadjs","PageRemover","onClick","onFileChanged","File","label","custom","App","handlePdfDocChange","bind","handleFileChanged","url","fetch","then","res","arrayBuffer","PDFDocument","load","saveAsBase64","dataUri","getPageCount","name","contents","Container","fluid","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd411b19.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport './Navbar.scss';\n\nexport default () => {\n  return <div className=\"NavBar\">\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Lean PDF Editor</Navbar.Brand>\n    </Navbar>\n  </div>;\n}\n","import React, { Component } from 'react';\nimport { Document, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\n\nimport './PDFRenderer.scss';\n\nexport default class PDFRenderer extends Component {\n  state = { numPages: this.props.numPages };\n\n  onFileChange = (event) => {\n    this.setState({\n      file: event.target.files[0],\n    });\n  };\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  render() {\n    const { numPages } = this.state;\n\n    return (\n      <div className=\"PDFRenderer__container__document\">\n        <Document\n          file={this.props.pdf}\n          onLoadSuccess={this.onDocumentLoadSuccess}\n        >\n          {\n            Array.from(\n              new Array(numPages),\n              (el, index) => {\n                return <Page\n                  key={`page_${index + 1}`}\n                  pageNumber={index + 1}\n                >\n                </Page>;\n              },\n            )\n          }\n        </Document>\n      </div>\n    );\n  }\n}\n","import Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState } from \"react\";\n\nexport default ({ pdfDoc, onPdfDocChange }) => {\n  const [validated, setValidated] = useState(false);\n  const [startPage, setStartPage] = useState(1);\n  const [endPage, setEndPage] = useState(1);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formIsValid = form.checkValidity() === true;\n    setValidated(true);\n\n    if (formIsValid) {\n      let index = startPage - 1;\n      do {\n        pdfDoc.removePage(index);\n        index++;\n      } while (startPage < endPage);\n\n      onPdfDocChange(pdfDoc)\n    }\n  };\n\n  function handlePageStartChange({ target }) {\n    setStartPage(target.value);\n  }\n\n  function handlePageEndChange({ target }) {\n    setEndPage(target.value);\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <h5>Remove pages</h5>\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min=\"1\"\n            placeholder=\"Page start\"\n            value={startPage}\n            onChange={handlePageStartChange}\n            required/>\n        </Col>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min=\"1\"\n            value={endPage}\n            onChange={handlePageEndChange}\n            placeholder=\"Page end\"\n            required/>\n        </Col>\n        <Button variant=\"warning\" type=\"submit\">\n          Remove\n        </Button>\n      </Row>\n    </Form>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport downloadjs from \"downloadjs\";\n\nimport './Editor.scss';\nimport PageRemover from \"../page-remover/PageRemover\";\n\nexport default ({ pdfDoc, onPdfDocChange, filename }) => {\n\n  const handleDownload = async (e) => {\n    const pdfBytes = await pdfDoc.save();\n    downloadjs(pdfBytes, filename, \"application/pdf\");\n  };\n\n  return (\n    <div className=\"Editor sticky-top\">\n      <h2>Editor</h2>\n      <hr/>\n      <PageRemover pdfDoc={pdfDoc} onPdfDocChange={onPdfDocChange}/>\n      <hr/>\n      <hr/>\n      <Button variant=\"primary\" onClick={handleDownload}>\n        Save\n      </Button>\n    </div>\n  );\n}\n","import Form from \"react-bootstrap/Form\";\nimport React from \"react\";\n\nimport './File.scss';\n\nexport default ({ filename, onFileChanged }) => {\n  return <div className=\"File\">\n    <h2>File</h2>\n    <Form>\n      <Form.File label={filename} custom onChange={onFileChanged}/>\n    </Form>\n  </div>;\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from \"react-bootstrap/Row\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport { PDFDocument } from 'pdf-lib';\n\nimport './App.scss';\nimport PDFRenderer from \"./components/pdf-render/PDFRenderer\";\nimport Col from \"react-bootstrap/Col\";\nimport Editor from \"./components/editor/Editor\";\nimport File from \"./components/file/File\";\n\nexport default class App extends React.Component {\n  state = {\n    filename: './sample.pdf',\n    pdf: null,\n    pdfDoc: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handlePdfDocChange = this.handlePdfDocChange.bind(this);\n    this.handleFileChanged = this.handleFileChanged.bind(this);\n  }\n\n  async componentDidMount() {\n    const url = this.state.filename;\n    const file = await fetch(url).then(res => res.arrayBuffer());\n    const pdfDoc = await PDFDocument.load(file);\n    const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    const numPages = pdfDoc.getPageCount();\n    this.setState({  pdfDoc, pdf, numPages });\n  }\n\n  async handlePdfDocChange(pdfDoc) {\n    const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    const numPages = pdfDoc.getPageCount();\n    this.setState({ pdfDoc, pdf, numPages });\n  }\n\n  async handleFileChanged(e) {\n    const file = e.target.files[0];\n    const filename = file.name;\n    const contents = await file.arrayBuffer();\n    const pdfDoc = await PDFDocument.load(contents);\n    const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    const numPages = pdfDoc.getPageCount();\n    this.setState({  pdfDoc, pdf, numPages, filename });\n  }\n\n\n  render() {\n    return <>\n      <Navbar/>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Container fluid>\n              <File filename={this.state.filename} onFileChanged={this.handleFileChanged}/>\n              <Editor\n                pdfDoc={this.state.pdfDoc}\n                onPdfDocChange={this.handlePdfDocChange}\n                filename={this.state.filename}\n              />\n            </Container>\n          </Col>\n          <Col>\n            <PDFRenderer\n              pdf={this.state.pdf}\n              numPages={this.state.numPages}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}