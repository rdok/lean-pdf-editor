{"version":3,"sources":["components/pdf-render/PDFRenderer.js","components/editor/Editor.js","App.js","serviceWorker.js","index.js"],"names":["PDFRenderer","state","file","numPages","onFileChange","event","setState","target","files","onDocumentLoadSuccess","this","className","onLoadSuccess","Array","from","el","index","key","pageNumber","Component","Editor","type","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAMqBA,G,0NACnBC,MAAQ,CACNC,KAAM,eACNC,SAAU,M,EAGZC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,KAAMG,EAAME,OAAOC,MAAM,M,EAI7BC,sBAAwB,YAAmB,IAAhBN,EAAe,EAAfA,SACzB,EAAKG,SAAS,CAAEH,c,uDAGR,IAAD,EACoBO,KAAKT,MAAxBC,EADD,EACCA,KAAMC,EADP,EACOA,SAEd,OACE,yBAAKQ,UAAU,eACb,yBAAKA,UAAU,0BAQb,yBAAKA,UAAU,oCACb,kBAAC,WAAD,CACET,KAAMA,EACNU,cAAeF,KAAKD,uBAGlBI,MAAMC,KACJ,IAAID,MAAMV,IACV,SAACY,EAAIC,GAAL,OACE,kBAAC,OAAD,CACEC,IAAG,eAAUD,EAAQ,GACrBE,WAAYF,EAAQ,e,GAxCDG,cCFpBC,G,8KAGjB,OACE,yBAAKT,UAAU,eACb,yBAAKA,UAAU,0BACb,8BACE,2BAAOU,KAAK,SAASC,MAAM,oB,GAPHH,cCGfI,E,uKAGjB,OACE,6BACE,gCACE,sDAEF,yBAAKZ,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAVuBQ,aCKbK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b21b9cb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Document, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\n\nimport './PDFRenderer.scss';\n\nexport default class PDFRenderer extends Component {\n  state = {\n    file: './sample.pdf',\n    numPages: null,\n  };\n\n  onFileChange = (event) => {\n    this.setState({\n      file: event.target.files[0],\n    });\n  };\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  render() {\n    const { file, numPages } = this.state;\n\n    return (\n      <div className=\"PDFRenderer\">\n        <div className=\"PDFRenderer__container\">\n          {/*<div className=\"PDFRenderer__container__load\">*/}\n            {/*<label htmlFor=\"file\">Load from file:</label>*/}\n            {/*<input*/}\n            {/*  onChange={this.onFileChange}*/}\n            {/*  type=\"file\"*/}\n            {/*/>*/}\n          {/*</div>*/}\n          <div className=\"PDFRenderer__container__document\">\n            <Document\n              file={file}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n            >\n              {\n                Array.from(\n                  new Array(numPages),\n                  (el, index) => (\n                    <Page\n                      key={`page_${index + 1}`}\n                      pageNumber={index + 1}\n                    >\n                    </Page>\n                  ),\n                )\n              }\n            </Document>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './Editor.scss';\n\nexport default class Editor extends Component {\n\n  render() {\n    return (\n      <div className=\"ActionsForm\">\n        <div className=\"ActionsForm__container\">\n          <form>\n            <input type=\"submit\" value=\"Bookmark\"/>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './App.scss';\n\nimport PDFRenderer from \"./components/pdf-render/PDFRenderer\";\nimport Editor from \"./components/editor/Editor\";\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div>\n        <header>\n          <h1>react-pdf sample page</h1>\n        </header>\n        <div className=\"Content\">\n          <PDFRenderer/>\n          <Editor />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}