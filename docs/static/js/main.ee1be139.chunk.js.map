{"version":3,"sources":["components/navbar/Navbar.js","components/pagination/Pagination.js","components/viewer/Viewer.js","components/page-range-remover/PageRangeRemover.js","components/editor/Editor.js","components/file/File.js","App.js","serviceWorker.js","index.js"],"names":["className","Navbar","bg","variant","Brand","href","pageNumber","numPages","goToPreviousPage","goToNextPage","pageNumberLabel","Container","Button","disabled","onClick","Col","ProgressBar","now","label","Viewer","props","state","onFileChange","event","onDocumentLoadSuccess","setState","bind","this","file","data","Uint8Array","buffer","onLoadSuccess","onItemClick","key","Component","onFileModified","pdfDoc","onPdfDocChange","useState","validated","setValidated","startPage","setStartPage","endPage","setEndPage","handleSubmit","a","preventDefault","form","currentTarget","formIsValid","checkValidity","PDFDocument","load","console","log","index","Number","maxPage","removePage","save","totalPages","getPageCount","Form","noValidate","onSubmit","Row","Control","type","min","placeholder","value","onChange","target","required","filename","handleDownload","e","pdfBytes","downloadjs","PageRangeRemover","onFileAttached","name","File","custom","App","pdf","handlePdfDocChange","handleFileAttached","handleFileModified","fetch","then","res","arrayBuffer","newFile","files","Math","fluid","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee1be139.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport './Navbar.scss';\n\nexport default () => {\n  return <div className=\"NavBar\">\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Lean PDF Editor</Navbar.Brand>\n    </Navbar>\n  </div>;\n}\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\n\nimport './Pagination.scss';\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default ({ pageNumber, numPages, goToPreviousPage, goToNextPage }) => {\n  const pageNumberLabel = <span>Page {pageNumber || (numPages ? 1 : '--')} of {numPages || '--'}</span>;\n  return (\n    <div className=\"Pagination\">\n      <Container>\n        <div className=\"d-flex justify-content-between\">\n          <Button\n            variant=\"info\"\n            disabled={pageNumber <= 1}\n            className=\"float-left\"\n            onClick={goToPreviousPage}\n          >\n            Previous\n          </Button>\n          <Col>\n            <ProgressBar\n              className=\"ProgressBar\"\n              variant=\"info\"\n              now={pageNumber / numPages * 100}\n              label={pageNumberLabel}\n            />\n\n          </Col>\n          <div>\n          </div>\n          <Button\n            variant=\"info\"\n            disabled={pageNumber >= numPages}\n            onClick={goToNextPage}\n          >\n            Next\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Document, Outline, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\n\nimport './Viewer.scss';\nimport Pagination from \"../pagination/Pagination\";\n\nexport default class Viewer extends Component {\n  state = { numPages: null, pageNumber: 1 };\n\n  constructor(props) {\n    super(props);\n    this.goToPreviousPage = this.goToPreviousPage.bind(this);\n    this.goToNextPage = this.goToNextPage.bind(this);\n  }\n\n  onFileChange = (event) => {\n    // this.setState({\n    //   file: event.target.files[0],\n    // });\n  };\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n\n  onItemClick({ pageNumber }) {\n    this.setState({ pageNumber });\n  }\n\n  goToPreviousPage() {\n    const pageNumber = this.state.pageNumber - 1;\n    this.setState({ pageNumber });\n  }\n\n  goToNextPage() {\n    const pageNumber = this.state.pageNumber + 1;\n    this.setState({ pageNumber });\n  }\n\n  render() {\n    const { numPages, pageNumber } = this.state;\n    const { file } = this.props;\n    let data = null;\n\n    if (file.data instanceof Uint8Array) {\n      data = file.data.buffer;\n    } else {\n      data = file.data;\n    }\n\n    return (\n      <div>\n        <Pagination\n          pageNumber={pageNumber}\n          numPages={numPages}\n          goToNextPage={this.goToNextPage}\n          goToPreviousPage={this.goToPreviousPage}\n        />\n\n        <div\n          className=\"PDFRenderer__container__document\">\n          <Document\n            file={data}\n            onLoadSuccess={this.onDocumentLoadSuccess}\n          >\n            <Outline onItemClick={this.onItemClick}/>\n            <Page key={`page_${pageNumber}`} pageNumber={pageNumber}/>\n          </Document>\n        </div>\n      </div>\n    );\n  }\n}\n","import Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState } from \"react\";\nimport { PDFDocument } from 'pdf-lib';\n\nexport default ({ file, onFileModified, pdfDoc, onPdfDocChange }) => {\n  const [validated, setValidated] = useState(false);\n  const [startPage, setStartPage] = useState(0);\n  const [endPage, setEndPage] = useState(0);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formIsValid = form.checkValidity() === true;\n    setValidated(true);\n\n    if (formIsValid) {\n      const pdfDoc = await PDFDocument.load(file.data);\n      console.log('pdfDoc loaded content')\n      let index = Number(startPage);\n      let maxPage = Number(endPage);\n      do {\n        console.log('removing index', maxPage)\n        pdfDoc.removePage(maxPage);\n        maxPage--;\n      } while (index < maxPage);\n\n      console.log('saving to base64')\n      const data = await pdfDoc.save();\n      onFileModified({data, totalPages: pdfDoc.getPageCount()})\n      // const newFile = {name: file.name, content: blob}\n      // this.setState({file: newFile})\n    }\n  };\n\n  function handlePageStartChange({ target }) {\n    setStartPage(target.value);\n  }\n\n  function handlePageEndChange({ target }) {\n    setEndPage(target.value);\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <h5>Remove pages</h5>\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min=\"0\"\n            placeholder=\"Page start\"\n            value={startPage}\n            onChange={handlePageStartChange}\n            required/>\n        </Col>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min=\"0\"\n            value={endPage}\n            onChange={handlePageEndChange}\n            placeholder=\"Page end\"\n            required/>\n        </Col>\n        <Button variant=\"warning\" type=\"submit\">\n          Remove\n        </Button>\n      </Row>\n    </Form>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport downloadjs from \"downloadjs\";\n\nimport './Editor.scss';\nimport PageRangeRemover from \"../page-range-remover/PageRangeRemover\";\n\nexport default ({ file, onFileModified, pdfDoc, onPdfDocChange, filename }) => {\n\n  const handleDownload = async (e) => {\n    const pdfBytes = await pdfDoc.save();\n    downloadjs(pdfBytes, filename, \"application/pdf\");\n  };\n\n  return (\n    <div className=\"Editor sticky-top\">\n      <h2>Editor</h2>\n      <hr/>\n      <PageRangeRemover file={file} onFileModified={onFileModified}/>\n      <hr/>\n      <hr/>\n      <Button variant=\"primary\" onClick={handleDownload}>\n        Save\n      </Button>\n    </div>\n  );\n}\n","import Form from \"react-bootstrap/Form\";\nimport React from \"react\";\n\nimport './File.scss';\n\nexport default ({ file, onFileAttached }) => {\n  const filename = file ? file.name : ''\n\n  return <div className=\"File\">\n    <h2>File</h2>\n    <Form>\n      <Form.File label={filename} custom onChange={onFileAttached}/>\n    </Form>\n  </div>\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from \"react-bootstrap/Row\";\nimport Navbar from \"./components/navbar/Navbar\";\n\nimport './App.scss';\nimport Viewer from \"./components/viewer/Viewer\";\nimport Col from \"react-bootstrap/Col\";\nimport Editor from \"./components/editor/Editor\";\nimport File from \"./components/file/File\";\n\nexport default class App extends React.Component {\n  state = {\n    file: { name: './sample.pdf', data: null },\n    pageNumber: null,\n    pdf: null,\n    pdfDoc: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handlePdfDocChange = this.handlePdfDocChange.bind(this);\n    this.handleFileAttached = this.handleFileAttached.bind(this);\n    this.handleFileModified = this.handleFileModified.bind(this);\n  }\n\n  async componentDidMount() {\n    const { name } = this.state.file;\n    const data = await fetch(name).then(res => res.arrayBuffer());\n\n    this.setState({ file: { name, data } });\n    // const pdfDoc = await PDFDocument.load(file);\n    // const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    // const numPages = pdfDoc.getPageCount();\n    // this.setState({  pdfDoc, pdf, numPages });\n  }\n\n  async handlePdfDocChange(pdfDoc) {\n    // const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    // const numPages = pdfDoc.getPageCount();\n    // this.setState({ pdfDoc, pdf, numPages });\n  }\n\n  async handleFileAttached(e) {\n    const newFile = e.target.files[0];\n    const name = newFile.name\n    const data = await newFile.arrayBuffer();\n    this.setState({ file: { name, data } });\n    // const filename = file.name;\n    // const contents = await file.arrayBuffer();\n    // const pdfDoc = await PDFDocument.load(contents);\n    // const pdf = await pdfDoc.saveAsBase64({ dataUri: true });\n    // const numPages = pdfDoc.getPageCount();\n    // this.setState({  pdfDoc, pdf, numPages, filename });\n  }\n\n  handleFileModified({ data, totalPages }) {\n    console.log(data);\n    const { name } = this.state.file;\n    const pageNumber = Math.min(totalPages, this.state.pageNumber);\n    this.setState({ file: { name, data }, pageNumber });\n  }\n\n  render() {\n    return <div>\n      <Navbar/>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Container fluid className=\"sticky-top\">\n              <File file={this.state.file} onFileAttached={this.handleFileAttached}/>\n              <Editor file={this.state.file} onFileModified={this.handleFileModified}/>\n            </Container>\n          </Col>\n          <Col>\n            <Viewer file={this.state.file} pageNumber={this.state.pageNumber}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}