{"version":3,"sources":["components/navbar/Navbar.js","components/pagination/Pagination.js","components/viewer/Viewer.js","components/page-range-remover/PageRangeRemover.js","components/editor/Editor.js","components/file/File.js","App.js","serviceWorker.js","index.js"],"names":["className","Navbar","bg","variant","Brand","href","pageNumber","numPages","goToPreviousPage","goToNextPage","pageNumberLabel","Container","Button","disabled","onClick","Col","ProgressBar","now","Viewer","props","onDocumentLoadSuccess","setState","bind","this","file","onViewUpdated","render","data","Uint8Array","buffer","onLoadSuccess","onItemClick","key","Component","onPagesRemoval","useState","validated","setValidated","startPage","setStartPage","endPage","setEndPage","isProcessing","setProcessing","handleSubmit","event","a","preventDefault","form","currentTarget","formIsValid","checkValidity","payload","startIndex","Number","endIndex","Form","noValidate","onSubmit","Row","Control","type","min","max","placeholder","value","onChange","target","required","handleDownload","e","name","PDFDocument","load","inputPdf","create","outputPdf","copyPages","getPageIndices","forEach","page","addPage","save","pdfBytes","downloadjs","PageRangeRemover","onFileAttached","filename","File","label","custom","App","state","handleFileAttached","handlePagesRemoval","handleViewUpdated","fetch","then","res","arrayBuffer","pdfDoc","getPageCount","files","index","maxIndex","removePage","newData","totalPages","newPageNumber","Math","fluid","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8eb7a8a.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport './Navbar.scss';\n\nexport default () => {\n  return <div className=\"NavBar\">\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">Lean PDF Editor</Navbar.Brand>\n    </Navbar>\n  </div>;\n}\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\n\nimport './Pagination.scss';\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default ({ pageNumber, numPages, goToPreviousPage, goToNextPage }) => {\n  const pageNumberLabel = <span>Page {pageNumber  || (numPages ? 1 : '--')} of {numPages  || '--'}</span>;\n  return (\n    <div className=\"Pagination\">\n      <Container>\n        <div className=\"d-flex justify-content-between\">\n          <Button\n            variant=\"info\"\n            disabled={pageNumber <= 1}\n            className=\"float-left\"\n            onClick={goToPreviousPage}\n          >\n            Previous\n          </Button>\n          <Col>\n            <ProgressBar\n              className=\"ProgressBar\"\n              variant=\"info\"\n              now={pageNumber / numPages * 100}\n            />\n            {pageNumberLabel}\n          </Col>\n          <div>\n          </div>\n          <Button\n            variant=\"info\"\n            disabled={pageNumber >= numPages}\n            onClick={goToNextPage}\n          >\n            Next\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Document, Outline, Page } from 'react-pdf/dist/umd/entry.webpack';\nimport 'react-pdf/dist/esm/Page/AnnotationLayer.css';\n\nimport './Viewer.scss';\nimport Pagination from \"../pagination/Pagination\";\n\nexport default class Viewer extends Component {\n  constructor(props) {\n    super(props);\n    this.goToPreviousPage = this.goToPreviousPage.bind(this);\n    this.goToNextPage = this.goToNextPage.bind(this);\n  }\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n\n  onItemClick({ pageNumber }) {\n    this.setState({ pageNumber });\n  }\n\n  goToPreviousPage() {\n    const pageNumber = this.props.file.pageNumber - 1;\n    this.props.onViewUpdated({ pageNumber });\n  }\n\n  goToNextPage() {\n    const pageNumber = this.props.file.pageNumber + 1;\n    this.props.onViewUpdated({ pageNumber });\n  }\n\n  render() {\n    const { file } = this.props;\n    const { numPages, pageNumber, data } = file;\n    let render;\n\n    if (data instanceof Uint8Array) {\n      render = data.buffer;\n    } else {\n      render = data;\n    }\n\n    return (\n      <div>\n        <Pagination\n          pageNumber={pageNumber}\n          numPages={numPages}\n          goToNextPage={this.goToNextPage}\n          goToPreviousPage={this.goToPreviousPage}\n        />\n\n        <div\n          className=\"PDFRenderer__container__document\">\n          <Document\n            file={render}\n            onLoadSuccess={this.onDocumentLoadSuccess}\n          >\n            <Outline onItemClick={this.onItemClick}/>\n            <Page key={`page_${pageNumber}`} pageNumber={pageNumber}/>\n          </Document>\n        </div>\n      </div>\n    );\n  }\n}\n","import Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState } from \"react\";\n\nexport default ({ file, onPagesRemoval }) => {\n  const [validated, setValidated] = useState(false);\n  const [startPage, setStartPage] = useState(1);\n  const [endPage, setEndPage] = useState(1);\n  const [isProcessing, setProcessing] = useState(false);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const formIsValid = form.checkValidity() === true;\n    setValidated(true);\n\n    if (formIsValid) {\n      setProcessing(true);\n      const payload = {\n        startIndex: Number(startPage) - 1,\n        endIndex: Number(endPage) - 1\n      };\n      await onPagesRemoval(payload);\n      setProcessing(false);\n    }\n  };\n\n  function handlePageStartChange({ target }) {\n    setStartPage(target.value);\n  }\n\n  function handlePageEndChange({ target }) {\n    setEndPage(target.value);\n  }\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <h5>Remove pages</h5>\n      <Row>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min=\"1\"\n            max={file.numPages}\n            placeholder=\"Page start\"\n            value={startPage}\n            onChange={handlePageStartChange}\n            required/>\n        </Col>\n        <Col>\n          <Form.Control\n            type=\"number\"\n            min={startPage}\n            max={file.numPages}\n            value={endPage}\n            onChange={handlePageEndChange}\n            placeholder=\"Page end\"\n            required/>\n        </Col>\n        <Button variant=\"warning\" type=\"submit\" disabled={isProcessing}>\n          {isProcessing ? 'Processing...' : 'Remove'}\n        </Button>\n      </Row>\n    </Form>\n  );\n}\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport downloadjs from \"downloadjs\";\n\nimport './Editor.scss';\nimport PageRangeRemover from \"../page-range-remover/PageRangeRemover\";\nimport { PDFDocument } from \"pdf-lib\";\n\nexport default ({ file, onPagesRemoval }) => {\n  const [isProcessing, setProcessing] = useState(false);\n\n  const handleDownload = async (e) => {\n    setProcessing(true)\n    const { data, name } = file;\n    const inputPdf = await PDFDocument.load(data);\n\n    const outputPdf = await PDFDocument.create();\n\n    const copiedPages = await outputPdf.copyPages(\n      inputPdf,\n      inputPdf.getPageIndices(),\n    );\n\n    copiedPages.forEach( (page) => {\n      outputPdf.addPage(page)\n    })\n\n    const pdfBytes = await outputPdf.save();\n\n    downloadjs(pdfBytes, name, \"application/pdf\");\n    setProcessing(false)\n  };\n\n  return (\n    <div className=\"Editor sticky-top\">\n      <h2>Editor</h2>\n      <hr/>\n      <PageRangeRemover file={file} onPagesRemoval={onPagesRemoval}/>\n      <hr/>\n      <hr/>\n      <Button variant=\"primary\" onClick={handleDownload} disabled={isProcessing}>\n        {isProcessing ? 'Processing...' : 'Save'}\n      </Button>\n    </div>\n  );\n}\n","import Form from \"react-bootstrap/Form\";\nimport React from \"react\";\n\nimport './File.scss';\n\nexport default ({ file, onFileAttached }) => {\n  const filename = file ? file.name : ''\n\n  return <div className=\"File\">\n    <h2>File</h2>\n    <Form>\n      <Form.File label={filename} custom onChange={onFileAttached}/>\n    </Form>\n  </div>\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from \"react-bootstrap/Row\";\nimport Navbar from \"./components/navbar/Navbar\";\n\nimport './App.scss';\nimport Viewer from \"./components/viewer/Viewer\";\nimport Col from \"react-bootstrap/Col\";\nimport Editor from \"./components/editor/Editor\";\nimport File from \"./components/file/File\";\nimport { PDFDocument } from \"pdf-lib\";\n\nconst INITIAL_PAGE_NUMBER = 1;\n\nexport default class App extends React.Component {\n  state = {\n    file: {\n      name: './sample.pdf',\n      data: null,\n      numPages: null,\n      pageNumber: INITIAL_PAGE_NUMBER,\n    },\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleFileAttached = this.handleFileAttached.bind(this);\n    this.handlePagesRemoval = this.handlePagesRemoval.bind(this);\n    this.handleViewUpdated = this.handleViewUpdated.bind(this);\n  }\n\n  async componentDidMount() {\n    const { name } = this.state.file;\n    const data = await fetch(name).then(res => res.arrayBuffer());\n    const pdfDoc = await PDFDocument.load(data);\n    const numPages = pdfDoc.getPageCount();\n    this.setState({ file: { name, data, numPages, pageNumber: INITIAL_PAGE_NUMBER } });\n  }\n\n  async handleFileAttached(e) {\n    const file = e.target.files[0];\n    const name = file.name;\n    const data = await file.arrayBuffer();\n    const pdfDoc = await PDFDocument.load(data);\n    const numPages = pdfDoc.getPageCount();\n    const pageNumber = INITIAL_PAGE_NUMBER;\n\n    this.setState({ file: { name, data, pageNumber, numPages } });\n  }\n\n  async handlePagesRemoval({ startIndex, endIndex }) {\n    const { name, data, pageNumber } = this.state.file;\n    const pdfDoc = await PDFDocument.load(data);\n\n    let index = startIndex;\n    let maxIndex = endIndex;\n    while (index <= maxIndex) {\n      pdfDoc.removePage(maxIndex);\n      maxIndex--;\n    }\n    const newData = await pdfDoc.save();\n    const totalPages = pdfDoc.getPageCount();\n    const newPageNumber = Math.min(totalPages, pageNumber);\n\n    this.setState({\n      file: {\n        name,\n        data: newData,\n        pageNumber: newPageNumber,\n        numPages: totalPages\n      },\n    });\n  }\n\n  handleViewUpdated({ pageNumber }) {\n    const { file } = this.state;\n    file.pageNumber = pageNumber;\n    this.setState({ file });\n  }\n\n  render() {\n    return <div>\n      <Navbar/>\n      <Container fluid>\n        <Row>\n          <Col>\n            <Container fluid className=\"sticky-top\">\n              <File file={this.state.file} onFileAttached={this.handleFileAttached}/>\n              <Editor\n                file={this.state.file}\n                onPagesRemoval={this.handlePagesRemoval}\n              />\n            </Container>\n          </Col>\n          <Col>\n            <Viewer file={this.state.file} onViewUpdated={this.handleViewUpdated}/>\n          </Col>\n        </Row>\n      </Container>\n    </div>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}